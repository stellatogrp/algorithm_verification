/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
/home/vranjan/.conda/envs/alg-cert/lib/python3.9/site-packages/cvxpy/expressions/expression.py:593: UserWarning:
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
[0.39829108 0.41879443] [-1.43069857 -1.93912779] [1.43069857 1.93912779]
[-0.39829108 -0.41879443  0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
 -1.43069857 -1.93912779 -1.43069857 -1.93912779 -1.43069857 -1.93912779
 -1.43069857 -1.93912779 -1.43069857 -1.93912779 -1.43069857 -1.93912779
 -0.45720481 -0.45720481 -0.45720481 -0.45720481 -0.45720481]
1 steps of algorithm
----Initial set----
SET(x): box with l = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] and u = [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
SET(y): const = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0.]
SET(z): const = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0.]
----Parameter set----
SET(x_init): box with l = [-1.43069857 -1.93912779] and u = [1.43069857 1.93912779]
SET(l_param): BoxStackSet =
SET(u_param): BoxStackSet =
----Algorithm steps----
x = LINSTEP(x, z, y, )
y = LINSTEP(y, x, z, )
w = LINSTEP(x, y, )
z_tilde = MAX_WITH_VEC(w)
z = MIN_WITH_VEC(z_tilde)
s = LINSTEP(z, y, )
----Objective----
[<algoverify.objectives.convergence_residual.ConvergenceResidual object at 0x14ecdcae2af0>, <algoverify.objectives.convergence_residual.ConvergenceResidual object at 0x14ecdcae2b50>]
Set parameter GURO_PAR_SPECIAL
Set parameter TokenServer to value "license.rc.princeton.edu"
Set parameter NonConvex to value 2
Set parameter MIPGap to value 0.01
Set parameter TimeLimit to value 3600
Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (linux64)
Thread count: 32 physical cores, 32 logical processors, using up to 32 threads
Optimize a model with 544 rows, 500 columns and 2434 nonzeros
Model fingerprint: 0x3fde4875
Model has 138 quadratic objective terms
Model has 2 quadratic constraints
Coefficient statistics:
  Matrix range     [3e-07, 2e+00]
  QMatrix range    [1e+00, 1e+00]
  Objective range  [0e+00, 0e+00]
  QObjective range [2e+00, 4e+00]
  Bounds range     [1e-03, 2e+00]
  RHS range        [5e-01, 2e+00]
Presolve removed 340 rows and 281 columns

Continuous model is non-convex -- solving as a MIP

Presolve removed 469 rows and 406 columns
Presolve time: 0.00s
Presolved: 173 rows, 175 columns, 764 nonzeros
Presolved model has 80 bilinear constraint(s)
Variable types: 166 continuous, 9 integer (9 binary)

Root relaxation: objective 3.474500e+01, 135 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0   34.74500    0   48          -   34.74500      -     -    0s
H    0     0                      21.0576347   34.74500  65.0%     -    0s
     0     0   30.62944    0   37   21.05763   30.62944  45.5%     -    0s
H    0     0                      26.7591935   30.62944  14.5%     -    0s
     0     0   30.58007    0   31   26.75919   30.58007  14.3%     -    0s
     0     0   30.58007    0   31   26.75919   30.58007  14.3%     -    0s
H    0     0                      27.4048631   30.58007  11.6%     -    0s
H    0     0                      27.4129090   30.58007  11.6%     -    0s
H    0     0                      27.4174184   30.58007  11.5%     -    0s
     0     2   30.58007    0   31   27.41742   30.58007  11.5%     -    0s

Cutting planes:
  Implied bound: 11
  MIR: 7
  Flow cover: 6
  RLT: 37
  Relax-and-lift: 8

Explored 1539 nodes (8973 simplex iterations) in 0.57 seconds (0.08 work units)
Thread count was 32 (of 32 available processors)

Solution count 5: 27.4174 27.4129 27.4049 ... 21.0576

Optimal solution found (tolerance 1.00e-02)
Best objective 2.741741844845e+01, best bound 2.751579940029e+01, gap 0.3588%
global (27.41741844845421, 0.5725219249725342)
1 steps of algorithm
----Initial set----
SET(x): box with l = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] and u = [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
SET(y): const = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0.]
SET(z): const = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0.]
----Parameter set----
SET(x_init): box with l = [ 0.86630945 -1.57922254] and u = [ 0.86630945 -1.57922254]
SET(l_param): BoxStackSet =
SET(u_param): BoxStackSet =
----Algorithm steps----
x = LINSTEP(x, z, y, )
y = LINSTEP(y, x, z, )
w = LINSTEP(x, y, )
z_tilde = MAX_WITH_VEC(w)
z = MIN_WITH_VEC(z_tilde)
s = LINSTEP(z, y, )
----Objective----
[<algoverify.objectives.convergence_residual.ConvergenceResidual object at 0x14ecdca724c0>, <algoverify.objectives.convergence_residual.ConvergenceResidual object at 0x14ecdca72460>]
Set parameter NonConvex to value 2
Set parameter MIPGap to value 0.01
Set parameter TimeLimit to value 3600
Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (linux64)
Thread count: 32 physical cores, 32 logical processors, using up to 32 threads
Optimize a model with 544 rows, 500 columns and 2434 nonzeros
Model fingerprint: 0xb9fa630f
Model has 138 quadratic objective terms
Model has 2 quadratic constraints
Coefficient statistics:
  Matrix range     [3e-07, 2e+00]
  QMatrix range    [1e+00, 1e+00]
  Objective range  [0e+00, 0e+00]
  QObjective range [2e+00, 4e+00]
  Bounds range     [1e-03, 2e+00]
  RHS range        [5e-01, 2e+00]
Presolve removed 351 rows and 290 columns

Continuous model is non-convex -- solving as a MIP

Presolve removed 483 rows and 422 columns
Presolve time: 0.00s
Presolved: 159 rows, 159 columns, 726 nonzeros
Presolved model has 80 bilinear constraint(s)
Variable types: 154 continuous, 5 integer (5 binary)

Root relaxation: objective 3.050491e+01, 131 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0   30.50491    0   46          -   30.50491      -     -    0s
H    0     0                      23.2170887   30.50491  31.4%     -    0s
     0     0   26.42320    0   36   23.21709   26.42320  13.8%     -    0s
     0     0   26.37384    0   31   23.21709   26.37384  13.6%     -    0s
     0     0   26.37384    0   31   23.21709   26.37384  13.6%     -    0s
     0     2   26.37384    0   31   23.21709   26.37384  13.6%     -    0s
* 1166    38              13      23.2170915   24.49338  5.50%   5.5    0s

Cutting planes:
  Implied bound: 10
  MIR: 5
  Flow cover: 6
  RLT: 35
  Relax-and-lift: 8

Explored 1393 nodes (7735 simplex iterations) in 0.35 seconds (0.06 work units)
Thread count was 32 (of 32 available processors)

Solution count 1: 23.2171

Optimal solution found (tolerance 1.00e-02)
Best objective 2.321708874338e+01, best bound 2.321709154630e+01, gap 0.0000%
global (23.217088743379737, 0.35443902015686035)
1 steps of algorithm
----Initial set----
SET(x): box with l = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] and u = [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
SET(y): const = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0.]
SET(z): const = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0.]
----Parameter set----
SET(x_init): box with l = [-0.64939415 -1.70936751] and u = [0.94182002 1.41564183]
SET(l_param): BoxStackSet =
SET(u_param): BoxStackSet =
----Algorithm steps----
x = LINSTEP(x, z, y, )
y = LINSTEP(y, x, z, )
w = LINSTEP(x, y, )
z_tilde = MAX_WITH_VEC(w)
z = MIN_WITH_VEC(z_tilde)
s = LINSTEP(z, y, )
----Objective----
[<algoverify.objectives.convergence_residual.ConvergenceResidual object at 0x14ecdca91460>, <algoverify.objectives.convergence_residual.ConvergenceResidual object at 0x14ecdca91400>]
Set parameter NonConvex to value 2
Set parameter MIPGap to value 0.01
Set parameter TimeLimit to value 3600
Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (linux64)
Thread count: 32 physical cores, 32 logical processors, using up to 32 threads
Optimize a model with 544 rows, 500 columns and 2434 nonzeros
Model fingerprint: 0x183ce0c0
Model has 138 quadratic objective terms
Model has 2 quadratic constraints
Coefficient statistics:
  Matrix range     [3e-07, 2e+00]
  QMatrix range    [1e+00, 1e+00]
  Objective range  [0e+00, 0e+00]
  QObjective range [2e+00, 4e+00]
  Bounds range     [1e-03, 2e+00]
  RHS range        [5e-01, 2e+00]
Presolve removed 340 rows and 281 columns

Continuous model is non-convex -- solving as a MIP

Presolve removed 469 rows and 406 columns
Presolve time: 0.00s
Presolved: 173 rows, 175 columns, 764 nonzeros
Presolved model has 80 bilinear constraint(s)
Variable types: 166 continuous, 9 integer (9 binary)

Root relaxation: objective 3.167028e+01, 137 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0   31.67028    0   48          -   31.67028      -     -    0s
H    0     0                      21.0576347   31.67028  50.4%     -    0s
     0     0   27.55887    0   36   21.05763   27.55887  30.9%     -    0s
H    0     0                      24.3511477   27.55887  13.2%     -    0s
     0     0   27.50950    0   31   24.35115   27.50950  13.0%     -    0s
     0     0   27.50950    0   31   24.35115   27.50950  13.0%     -    0s
     0     2   27.50950    0   31   24.35115   27.50950  13.0%     -    0s
H   42    60                      24.3511483   26.57849  9.15%   5.5    0s
* 1180    61              13      24.3511501   25.62904  5.25%   5.8    0s

Cutting planes:
  Gomory: 1
  Implied bound: 12
  MIR: 6
  Flow cover: 9
  RLT: 37
  Relax-and-lift: 8

Explored 1429 nodes (8517 simplex iterations) in 0.33 seconds (0.07 work units)
Thread count was 32 (of 32 available processors)

Solution count 2: 24.3512 21.0576

Optimal solution found (tolerance 1.00e-02)
Best objective 2.435114714269e+01, best bound 2.435115009395e+01, gap 0.0000%
global (24.351147142693026, 0.3300740718841553)
2 steps of algorithm
----Initial set----
SET(x): box with l = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] and u = [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
SET(y): const = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0.]
SET(z): const = [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0.]
----Parameter set----
SET(x_init): box with l = [-1.43069857 -1.93912779] and u = [1.43069857 1.93912779]
SET(l_param): BoxStackSet =
SET(u_param): BoxStackSet =
----Algorithm steps----
x = LINSTEP(x, z, y, )
y = LINSTEP(y, x, z, )
w = LINSTEP(x, y, )
z_tilde = MAX_WITH_VEC(w)
z = MIN_WITH_VEC(z_tilde)
s = LINSTEP(z, y, )
----Objective----
[<algoverify.objectives.convergence_residual.ConvergenceResidual object at 0x14ecdca72a30>, <algoverify.objectives.convergence_residual.ConvergenceResidual object at 0x14ecdca72640>]
Set parameter NonConvex to value 2
Set parameter MIPGap to value 0.01
Set parameter TimeLimit to value 3600
Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (linux64)
Thread count: 32 physical cores, 32 logical processors, using up to 32 threads
Optimize a model with 880 rows, 778 columns and 4656 nonzeros
Model fingerprint: 0xe6662bdb
Model has 138 quadratic objective terms
Model has 4 quadratic constraints
Coefficient statistics:
  Matrix range     [3e-07, 2e+00]
  QMatrix range    [1e+00, 1e+00]
  Objective range  [0e+00, 0e+00]
  QObjective range [2e+00, 4e+00]
  Bounds range     [1e-03, 6e+00]
  RHS range        [5e-01, 2e+00]
Presolve removed 472 rows and 359 columns

Continuous model is non-convex -- solving as a MIP

Presolve removed 718 rows and 597 columns
Presolve time: 0.01s
Presolved: 347 rows, 320 columns, 1886 nonzeros
Presolved model has 138 bilinear constraint(s)
Variable types: 297 continuous, 23 integer (23 binary)

Root relaxation: objective 1.949415e+02, 379 iterations, 0.01 seconds (0.01 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  194.94154    0  145          -  194.94154      -     -    0s
H    0     0                      28.0552200  194.94154   595%     -    0s
     0     0  151.14755    0  152   28.05522  151.14755   439%     -    0s
     0     0  148.75327    0  149   28.05522  148.75327   430%     -    0s
     0     0  148.53574    0  150   28.05522  148.53574   429%     -    0s
     0     0  148.27505    0  149   28.05522  148.27505   429%     -    0s
     0     0  148.24145    0  149   28.05522  148.24145   428%     -    0s
     0     0  148.13873    0  150   28.05522  148.13873   428%     -    0s
     0     0   92.94201    0  146   28.05522   92.94201   231%     -    0s
     0     2   92.94201    0  146   28.05522   92.94201   231%     -    0s
H   46    44                      28.0552200   82.77397   195%  26.3    0s
  3742  2369   40.78415   26  123   28.05522   48.37661  72.4%  13.7    5s
 12911  5243   29.11875   36  112   28.05522   42.77915  52.5%  18.2   13s
 12949  5250     cutoff   38        28.05522   42.77915  52.5%  18.2   16s
 22136 10591   28.10234   51  111   28.05522   40.66826  45.0%  18.9   20s
 39715 18746   30.71650   37  119   28.05522   39.23015  39.8%  18.6   25s
 55947 28364   30.35610   37  116   28.05522   38.58042  37.5%  18.5   30s
 68884 35138   35.96149   33  122   28.05522   38.21393  36.2%  18.6   35s
 82464 41337     cutoff   46        28.05522   37.71796  34.4%  18.6   40s
 94567 46140     cutoff   42        28.05522   37.46700  33.5%  18.6   45s
 107932 51197   29.35859   47  116   28.05522   37.24482  32.8%  18.5   50s
 123482 58147   32.26188   31  119   28.05522   37.01294  31.9%  18.5   55s
 135945 65111   28.44777   36  118   28.05522   36.86348  31.4%  18.5   60s
 148896 69514     cutoff   41        28.05522   36.72241  30.9%  18.4   65s
 161449 75918   35.12065   29  122   28.05522   36.66239  30.7%  18.3   70s
 174037 83868   33.40500   32  120   28.05522   36.50376  30.1%  18.3   76s
 186856 87736   29.38118   47  118   28.05522   36.38735  29.7%  18.3   81s
 195981 93975   31.22040   33  118   28.05522   36.31858  29.5%  18.3   85s
 208953 100568     cutoff   39        28.05522   36.22302  29.1%  18.2   90s
 221725 105769     cutoff   32        28.05522   36.14876  28.8%  18.2   96s
 234621 110274   32.17080   29  114   28.05522   36.04433  28.5%  18.2  101s
 244168 112929   32.52540   34  116   28.05522   35.99553  28.3%  18.2  105s
 257133 118323   32.55159   33  114   28.05522   35.88558  27.9%  18.2  111s
 266626 123073   34.02733   26  122   28.05522   35.81912  27.7%  18.2  115s
 279473 128244     cutoff   31        28.05522   35.75427  27.4%  18.2  120s
slurmstepd: error: *** JOB 43882290 ON della-r3c2n1 CANCELLED AT 2022-11-10T14:59:24 ***
